# docker-compose version tag.
version: "3.5"

# Define docker-composes services
services:

  # ---------------------- MessageQueue Section ----------------------
  # MessageQueue Container
  messagequeue:    
    # Set hostname
    hostname: messagequeue
    
    privileged: true
    
    # IMPORTANT! Image not specified to ensure generics and light weightness;
    # to make sure only one place is controlling messagequeue type - 
    # it's being installed based on installtion file configured by environment variable
  
    # Path of Dockerfile
    build: 
      context: .

    # Container can access to the 'localhost' of the computer.
    network_mode: host
    
    # Setting common volume, to share files among containers
    volumes:
      - ./:/usr/src/app
    
    # Define port so it would be accessible from outside the container
    # [port on machine]:[port in the container]
    ports:
      - "4369:4369"
      - "5671:5671"      
      - "5672:5672"
      - "15672:15672"

    # Defining environment variables      
    environment:
      RUN: PUBLISHER_CONSUMER
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: mWMjW4hn
      RABBITMQ_NODE_IP_ADDRESS: "0.0.0.0"
      
    healthcheck:
        test: ["CMD", "curl", "-f", "http://127.0.0.1:15672"]
        interval: 1m
        timeout: 20s
        retries: 5
        start_period: 5m
        
    restart: on-failure

  # ---------------------- Database Section ----------------------
  # Database Container
  database:
    # Path of Dockerfile
    build: 
      context: .

    # Container can access to the 'localhost' of the computer.
    network_mode: host
    
    # Setting common volume, to share files among containers
    volumes:
      - ./:/usr/src/app
    
    # Define port so it would be accessible from outside the container
    # [port on machine]:[port in the container]
    ports:
      - "27017:27017"

    # Defining environment variables      
    environment:
      RUN: DATABASE      
      
    healthcheck:
        test: ["CMD", "curl", "-f", "http://127.0.0.1:27017"]
        interval: 1m
        timeout: 20s
        retries: 5
        start_period: 5m
        
    restart: on-failure

  # ---------------------- API Section ----------------------
  # API Container
  api:
    # Path of Dockerfile
    build: 
      context: .

    # Container can access to the 'localhost' of the computer.
    network_mode: host
    
    # Setting common volume, to share files among containers
    volumes:
      - ./:/usr/src/app
    
    # Define port so it would be accessible from outside the container
    # [port on machine]:[port in the container]
    ports:
      - "5000:5000"     
      
    # The command to execute once the image is created.
    # Wait for database
    command: ["./scripts/wait-for-it.sh", "database:27017"]

    # Defining environment variables      
    environment:
      RUN: API  
      
    # Defining client won't start till other specified conatiners are ready
    depends_on:
      - database
      
    healthcheck:
        test: ["CMD", "curl", "-f", "http://127.0.0.1:5000/api/v1.0/users"]
        interval: 1m
        timeout: 20s
        retries: 5
        start_period: 5m
        
    restart: on-failure

  # ---------------------- GUI Section ----------------------
  # GUI Container
  gui:
    # Path of Dockerfile
    build: 
      context: .

    # Container can access to the 'localhost' of the computer.
    network_mode: host
    
    # Setting common volume, to share files among containers
    volumes:
      - ./:/usr/src/app
    
    # Define port so it would be accessible from outside the container
    # [port on machine]:[port in the container]
    ports:            
      - "8080:8080"
      
    # The command to execute once the image is created.
    # Wait for database and API
    command: [ "./scripts/wait-for-it.sh", "database:27017", "./scripts/wait-for-it.sh", "api:5000" ]

    # Defining environment variables      
    environment:
      RUN: GUI

    # Defining client won't start till other specified conatiners are ready
    depends_on:
      - database
      - api
      
    healthcheck:
        test: ["CMD", "curl", "-f", "http://127.0.0.1:8080"]
        interval: 1m
        timeout: 20s
        retries: 5
        start_period: 5m
        
    restart: on-failure
      
  # ---------------------- Savers Section ----------------------
  # Saver Container
  saver:
    # Path of Dockerfile
    build: 
      context: .

    # Container can access to the 'localhost' of the computer.
    network_mode: host
    
    # Setting common volume, to share files among containers
    volumes:
      - ./:/usr/src/app
    
    # Define port so it would be accessible from outside the container
    # [port on machine]:[port in the container]
    ports:
      - "4369:4369"
      - "5671:5671"      
      - "5672:5672"
      - "15672:15672"
      
    # The command to execute once the image is created.
    # Wait for database
    command: ["./scripts/wait-for-it.sh", "database:27017"]

    # Defining environment variables      
    environment:
      RUN: SAVER  
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: mWMjW4hn      

    # Defining client won't start till other specified conatiners are ready
    depends_on:
      - database
      - messagequeue
      
    restart: on-failure

  # ---------------------- Parsers Section ----------------------
  # Pose Parser Container
  parser_pose:
    # Path of Dockerfile
    build: 
      context: .

    # Container can access to the 'localhost' of the computer.
    network_mode: host
    
    # Setting common volume, to share files among containers
    volumes:
      - ./:/usr/src/app
    
    # Define port so it would be accessible from outside the container
    # [port on machine]:[port in the container]
    ports:
      - "4369:4369"
      - "5671:5671"      
      - "5672:5672"
      - "15672:15672"

    # Defining environment variables      
    environment:
      RUN: PARSERS
      PARSER: pose
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: mWMjW4hn      
      
    # Defining client won't start till other specified conatiners are ready
    depends_on:
      - saver
      - messagequeue
      
    restart: on-failure
    
      
  # Depth Image Parser Container
  parser_depth_image:
    # Path of Dockerfile
    build: 
      context: .

    # Container can access to the 'localhost' of the computer.
    network_mode: host
    
    # Setting common volume, to share files among containers
    volumes:
      - ./:/usr/src/app
    
    # Define port so it would be accessible from outside the container
    # [port on machine]:[port in the container]
    ports:
      - "4369:4369"
      - "5671:5671"      
      - "5672:5672"
      - "15672:15672"

    # Defining environment variables      
    environment:
      RUN: PARSERS
      PARSER: depth_image
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: mWMjW4hn      
      
    # Defining client won't start till other specified conatiners are ready
    depends_on:
      - saver
      - messagequeue
      
    restart: on-failure
    
      
  # Color Image Parser Container
  parser_color_image:
    # Path of Dockerfile
    build: 
      context: .

    # Container can access to the 'localhost' of the computer.
    network_mode: host
    
    # Setting common volume, to share files among containers
    volumes:
      - ./:/usr/src/app
    
    # Define port so it would be accessible from outside the container
    # [port on machine]:[port in the container]
    ports:
      - "4369:4369"
      - "5671:5671"      
      - "5672:5672"
      - "15672:15672"

    # Defining environment variables      
    environment:
      RUN: PARSERS
      PARSER: color_image
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: mWMjW4hn      
      
    # Defining client won't start till other specified conatiners are ready
    depends_on:
      - saver
      - messagequeue
      
    restart: on-failure
    

  # User feelings Parser Container
  parser_user_feelings:
    # Path of Dockerfile
    build: 
      context: .

    # Container can access to the 'localhost' of the computer.
    network_mode: host
    
    # Setting common volume, to share files among containers
    volumes:
      - ./:/usr/src/app
    
    # Define port so it would be accessible from outside the container
    # [port on machine]:[port in the container]
    ports:
      - "4369:4369"
      - "5671:5671"      
      - "5672:5672"      
      - "15672:15672"

    # Defining environment variables      
    environment:
      RUN: PARSERS
      PARSER: user_feelings      
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: mWMjW4hn      
      
    # Defining client won't start till other specified conatiners are ready
    depends_on:
      - saver
      - messagequeue
      
    restart: on-failure
    
  
  # ---------------------- Server & Client Section ----------------------
  # Server Container
  server:
    # Path of Dockerfile
    build: 
      context: .

    # Container can access to the 'localhost' of the computer.
    network_mode: host
    
    # Setting common volume, to share files among containers
    volumes:
      - ./:/usr/src/app
    
    # Define port so it would be accessible from outside the container
    # [port on machine]:[port in the container]
    ports:
      - "8000:8000"
      - "4369:4369"
      - "5671:5671"      
      - "5672:5672"
      - "15672:15672"

    # Defining environment variables      
    environment:
      RUN: SERVER
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: mWMjW4hn

    # Defining client won't start till other specified conatiners are ready
    depends_on:
      - saver
      - parser_pose
      - parser_color_image
      - parser_depth_image
      - parser_user_feelings
      - messagequeue
      
    restart: on-failure

  # # Client Container
  # # FOR END-TO-END TESTING
  # client:
  #   build: 
  #     context: .
  # 
  #   # The command to execute once the image is created.
  #   # Client waits for server to accept connections before starting
  #   command: ["./scripts/wait-for-it.sh", "server:8000"]
  # 
  #   # Container can access to the 'localhost' of the computer.
  #   network_mode: host
  # 
  #   # Setting common volume, to share files among containers
  #   volumes:
  #     - ./:/usr/src/app
  # 
  #   # Defining environment variables
  #   environment:
  #     RUN: CLIENT
  # 
  #   # Defining client won't start till other specified conatiners are ready
  #   depends_on:
  #     - server
    